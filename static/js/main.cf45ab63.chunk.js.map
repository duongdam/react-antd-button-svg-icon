{"version":3,"sources":["test.svg","App.js","index.js","../../lib/key-combo.js","../../lib/locale.js","../../lib/keyboard.js","../../locales/us.js","../../index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","cx","cy","r","fill","_ref3","clipPath","d","_ref4","id","width","height","transform","SvgTest","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","useStyles","makeStyles","theme","antBtn","background","borderColor","textAlign","color","textTransform","display","left","App","classes","style","maxWidth","padding","margin","name","size","onClick","message","success","onKeyClick","iconComponent","disable","iconRevert","block","enableTooltip","tooltipPlacement","loading","className","ReactDOM","render","document","getElementById","subCombos","otherSubCombo","subCombo","pressedKeyNames","startingKeyNameIndex","endIndex","keyName","escapedKeyName","KeyCombo","keyDeliminator","handler","keyNames","keyCombo","keyComboStr","e","return","otherKeyCombo","splice","combo","subComboStrs","_splitStr","c","ca","ci","localeName","pressedKeys","keyCodes","activeTargetKeys","killKeyCodeIndex","macros","macro","_contexts","_targetElement","_targetWindow","_targetPlatform","_targetKeyUpBinding","targetWindow","_targetResetBinding","targetElement","targetPlatform","localeBuilder","locale","_locales","localName","releaseHandler","preventRepeatByDefault","executingHandler","pressHandler","preventRepeat","bind","listener","releaseHandlerMatches","listeners","globalContext","previousContextName","getContext","addEventListener","attachEvent","targetUserAgent","_targetKeyDownBinding","event","releaseAllKeys","_bindEvent","currentContext","_targetUserAgent","_unbindEvent","_paused","releaseKey","listenerGroupMap","mapIndex","listenerGroups","j","platform","bindKeyCode","bindMacro","leftCommandKeyCode","rightCommandKeyCode","keyboard"],"mappings":"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","file":"static/js/main.cf45ab63.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 15.4023,\n  cy: 14.7453,\n  r: 14.652,\n  fill: \"white\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  clipPath: \"url(#clip2)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M21.6737 8.88622L20.52 7.73254C20.0513 7.2631 19.4157 7 18.7525 7H9.12504C8.17564 7 7.40625 7.76939 7.40625 8.71879V20.2812C7.40625 21.2306 8.17564 22 9.12504 22H20.6875C21.6369 22 22.4062 21.2306 22.4062 20.2812V10.6538C22.4062 9.99057 22.1432 9.35497 21.6737 8.88622ZM9.90621 10.9062V9.34375C9.90621 9.085 10.1162 8.875 10.375 8.875H16.9375C17.1962 8.875 17.4062 9.085 17.4062 9.34375V10.9062C17.4062 11.165 17.1962 11.375 16.9375 11.375H10.375C10.1162 11.375 9.90621 11.165 9.90621 10.9062ZM14.9062 19.5C13.3532 19.5 12.0938 18.2406 12.0938 16.6875C12.0938 15.1343 13.3532 13.875 14.9062 13.875C16.4593 13.875 17.7188 15.1343 17.7188 16.6875C17.7188 18.2406 16.4593 19.5 14.9062 19.5Z\",\n  fill: \"\"\n}));\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n  id: \"clip2\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: 15,\n  height: 15,\n  fill: \"white\",\n  transform: \"translate(7.40625 7)\"\n})));\n\nconst SvgTest = (_ref) => {\n  let svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 31,\n    height: 30,\n    viewBox: \"0 0 31 30\",\n    fill: \"#1790FF\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4);\n};\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTest, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/test.e40dac94.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport { ReactComponent as TestSVG } from \"./test.svg\";\nimport { CLFButtonSVG } from \"react-antd-button-svg-icons\";\nimport { message } from \"antd\";\nimport \"antd/lib/message/style/css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  antBtn: {\n    background: `red !important`,\n    borderColor: `red !important`,\n    // textAlign: \"left\",\n    textAlign: \"center\",\n    color: \"#fff\",\n    textTransform: \"uppercase\",\n    display: \"flex\",\n    \"& svg\": {\n      fill: \"red\"\n    },\n    \"& .ant-btn-block\": {\n      width: \"97%\"\n    },\n    \"& .clf-icon-Btn\": {\n      left: \"1px !important\"\n    }\n  }\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <div style={{\n      width: \"100%\",\n      display: \"grid\",\n      maxWidth: \"800px\",\n      // justifyContent: \"center\",\n      // alignItems: \"center\",\n      padding: \"100px 50px\",\n      margin: \"100px auto\"\n    }}>\n\n      With no icon\n      <CLFButtonSVG\n        name={\"ClassFunc\"}\n        size={\"default\"}\n        onClick={() => {\n          message.success(\"Hello CLFButtonSVG\", 0.2);\n        }}\n        onKeyClick={() => {\n          message.success(\"This is key + click\", 0.2);\n        }}\n        width={\"150px\"}\n      />\n\n      Default\n      <CLFButtonSVG\n        name={\"ClassFunc\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        onClick={() => {\n          message.success(\"Hello CLFButtonSVG\", 0.2);\n        }}\n        onKeyClick={() => {\n          message.success(\"This is key + click\", 0.2);\n        }}\n        disable={false}\n        width={\"150px\"}\n      />\n\n      Icon revert right\n      <CLFButtonSVG\n        name={\"ClassFunc\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        iconRevert={true}\n        onClick={() => {\n          message.success(\"Hello CLFButtonSVG\", 0.2);\n        }}\n        onKeyClick={() => {\n          message.success(\"This is key + click\", 0.2);\n        }}\n        disable={false}\n        width={\"150px\"}\n        background={\"#1790FF\"}\n        borderColor={\"#1790FF\"}\n      />\n\n      Full Width\n      <CLFButtonSVG\n        name={\"Full Width\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        onClick={() => {\n          message.success(\"Hello CLFButtonSVG\", 0.2);\n        }}\n        onKeyClick={() => {\n          message.success(\"This is key + click\", 0.2);\n        }}\n        disable={false}\n        block={true}\n        margin={\"5px\"}\n      />\n\n      With Tooltip\n      <CLFButtonSVG\n        name={\"With tooltip\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        onClick={() => {\n          message.success(\"Hello CLFButtonSVG\", 0.2);\n        }}\n        onKeyClick={() => {\n          message.success(\"This is key + click\", 0.2);\n        }}\n        disable={false}\n        block={true}\n        margin={\"5px\"}\n        enableTooltip={true}\n        tooltipPlacement={\"right\"}\n      />\n\n      Loading\n      <CLFButtonSVG\n        name={\"Full Width Loading\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        disable={false}\n        loading={true}\n        block={true}\n      />\n\n      Disabled\n      <CLFButtonSVG\n        name={\"Full Width Disable\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        disable={true}\n        loading={false}\n        block={true}\n        enableTooltip={true}\n        tooltipPlacement={\"right\"}\n      />\n\n      Disabled custom with makesTheme\n      <CLFButtonSVG\n        name={\"Full Width Disable\"}\n        size={\"default\"}\n        iconComponent={<TestSVG />}\n        disable={true}\n        loading={false}\n        block={true}\n        enableTooltip={true}\n        tooltipPlacement={\"right\"}\n        className={classes.antBtn}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","\nexport class KeyCombo {\n  constructor(keyComboStr) {\n    this.sourceStr = keyComboStr;\n    this.subCombos = KeyCombo.parseComboStr(keyComboStr);\n    this.keyNames  = this.subCombos.reduce((memo, nextSubCombo) =>\n      memo.concat(nextSubCombo), []);\n  }\n\n  check(pressedKeyNames) {\n    let startingKeyNameIndex = 0;\n    for (let i = 0; i < this.subCombos.length; i += 1) {\n      startingKeyNameIndex = this._checkSubCombo(\n        this.subCombos[i],\n        startingKeyNameIndex,\n        pressedKeyNames\n      );\n      if (startingKeyNameIndex === -1) { return false; }\n    }\n    return true;\n  };\n\n  isEqual(otherKeyCombo) {\n    if (\n      !otherKeyCombo ||\n      typeof otherKeyCombo !== 'string' &&\n      typeof otherKeyCombo !== 'object'\n    ) { return false; }\n\n    if (typeof otherKeyCombo === 'string') {\n      otherKeyCombo = new KeyCombo(otherKeyCombo);\n    }\n\n    if (this.subCombos.length !== otherKeyCombo.subCombos.length) {\n      return false;\n    }\n    for (let i = 0; i < this.subCombos.length; i += 1) {\n      if (this.subCombos[i].length !== otherKeyCombo.subCombos[i].length) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < this.subCombos.length; i += 1) {\n      const subCombo      = this.subCombos[i];\n      const otherSubCombo = otherKeyCombo.subCombos[i].slice(0);\n\n      for (let j = 0; j < subCombo.length; j += 1) {\n        const keyName = subCombo[j];\n        const index   = otherSubCombo.indexOf(keyName);\n\n        if (index > -1) {\n          otherSubCombo.splice(index, 1);\n        }\n      }\n      if (otherSubCombo.length !== 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _checkSubCombo(subCombo, startingKeyNameIndex, pressedKeyNames) {\n    subCombo = subCombo.slice(0);\n    pressedKeyNames = pressedKeyNames.slice(startingKeyNameIndex);\n\n    let endIndex = startingKeyNameIndex;\n    for (let i = 0; i < subCombo.length; i += 1) {\n\n      let keyName = subCombo[i];\n      if (keyName[0] === '\\\\') {\n        const escapedKeyName = keyName.slice(1);\n        if (\n          escapedKeyName === KeyCombo.comboDeliminator ||\n          escapedKeyName === KeyCombo.keyDeliminator\n        ) {\n          keyName = escapedKeyName;\n        }\n      }\n\n      const index = pressedKeyNames.indexOf(keyName);\n      if (index > -1) {\n        subCombo.splice(i, 1);\n        i -= 1;\n        if (index > endIndex) {\n          endIndex = index;\n        }\n        if (subCombo.length === 0) {\n          return endIndex;\n        }\n      }\n    }\n    return -1;\n  };\n}\n\nKeyCombo.comboDeliminator = '>';\nKeyCombo.keyDeliminator   = '+';\n\nKeyCombo.parseComboStr = function(keyComboStr) {\n  const subComboStrs = KeyCombo._splitStr(keyComboStr, KeyCombo.comboDeliminator);\n  const combo        = [];\n\n  for (let i = 0 ; i < subComboStrs.length; i += 1) {\n    combo.push(KeyCombo._splitStr(subComboStrs[i], KeyCombo.keyDeliminator));\n  }\n  return combo;\n}\n\nKeyCombo._splitStr = function(str, deliminator) {\n  const s  = str;\n  const d  = deliminator;\n  let c  = '';\n  const ca = [];\n\n  for (let ci = 0; ci < s.length; ci += 1) {\n    if (ci > 0 && s[ci] === d && s[ci - 1] !== '\\\\') {\n      ca.push(c.trim());\n      c = '';\n      ci += 1;\n    }\n    c += s[ci];\n  }\n  if (c) { ca.push(c.trim()); }\n\n  return ca;\n};\n","import { KeyCombo } from './key-combo';\n\n\nexport class Locale {\n  constructor(name) {\n    this.localeName          = name;\n    this.activeTargetKeys = [];\n    this.pressedKeys         = [];\n    this._appliedMacros      = [];\n    this._keyMap             = {};\n    this._killKeyCodes       = [];\n    this._macros             = [];\n  }\n\n  bindKeyCode(keyCode, keyNames) {\n    if (typeof keyNames === 'string') {\n      keyNames = [keyNames];\n    }\n\n    this._keyMap[keyCode] = keyNames;\n  };\n\n  bindMacro(keyComboStr, keyNames) {\n    if (typeof keyNames === 'string') {\n      keyNames = [ keyNames ];\n    }\n\n    let handler = null;\n    if (typeof keyNames === 'function') {\n      handler = keyNames;\n      keyNames = null;\n    }\n\n    const macro = {\n      keyCombo : new KeyCombo(keyComboStr),\n      keyNames : keyNames,\n      handler  : handler\n    };\n\n    this._macros.push(macro);\n  };\n\n  getKeyCodes(keyName) {\n    const keyCodes = [];\n    for (const keyCode in this._keyMap) {\n      const index = this._keyMap[keyCode].indexOf(keyName);\n      if (index > -1) { keyCodes.push(keyCode|0); }\n    }\n    return keyCodes;\n  };\n\n  getKeyNames(keyCode) {\n    return this._keyMap[keyCode] || [];\n  };\n\n  setKillKey(keyCode) {\n    if (typeof keyCode === 'string') {\n      const keyCodes = this.getKeyCodes(keyCode);\n      for (let i = 0; i < keyCodes.length; i += 1) {\n        this.setKillKey(keyCodes[i]);\n      }\n      return;\n    }\n\n    this._killKeyCodes.push(keyCode);\n  };\n\n  pressKey(keyCode) {\n    if (typeof keyCode === 'string') {\n      const keyCodes = this.getKeyCodes(keyCode);\n      for (let i = 0; i < keyCodes.length; i += 1) {\n        this.pressKey(keyCodes[i]);\n      }\n      return;\n    }\n\n    this.activeTargetKeys.length = 0;\n    const keyNames = this.getKeyNames(keyCode);\n    for (let i = 0; i < keyNames.length; i += 1) {\n      this.activeTargetKeys.push(keyNames[i]);\n      if (this.pressedKeys.indexOf(keyNames[i]) === -1) {\n        this.pressedKeys.push(keyNames[i]);\n      }\n    }\n\n    this._applyMacros();\n  };\n\n  releaseKey(keyCode) {\n    if (typeof keyCode === 'string') {\n      const keyCodes = this.getKeyCodes(keyCode);\n      for (let i = 0; i < keyCodes.length; i += 1) {\n        this.releaseKey(keyCodes[i]);\n      }\n\n    } else {\n      const keyNames         = this.getKeyNames(keyCode);\n      const killKeyCodeIndex = this._killKeyCodes.indexOf(keyCode);\n\n      if (killKeyCodeIndex !== -1) {\n        this.pressedKeys.length = 0;\n      } else {\n        for (let i = 0; i < keyNames.length; i += 1) {\n          const index = this.pressedKeys.indexOf(keyNames[i]);\n          if (index > -1) {\n            this.pressedKeys.splice(index, 1);\n          }\n        }\n      }\n\n      this.activeTargetKeys.length = 0;\n      this._clearMacros();\n    }\n  };\n\n  _applyMacros() {\n    const macros = this._macros.slice(0);\n    for (let i = 0; i < macros.length; i += 1) {\n      const macro = macros[i];\n      if (macro.keyCombo.check(this.pressedKeys)) {\n        if (macro.handler) {\n          macro.keyNames = macro.handler(this.pressedKeys);\n        }\n        for (let j = 0; j < macro.keyNames.length; j += 1) {\n          if (this.pressedKeys.indexOf(macro.keyNames[j]) === -1) {\n            this.pressedKeys.push(macro.keyNames[j]);\n          }\n        }\n        this._appliedMacros.push(macro);\n      }\n    }\n  };\n\n  _clearMacros() {\n    for (let i = 0; i < this._appliedMacros.length; i += 1) {\n      const macro = this._appliedMacros[i];\n      if (!macro.keyCombo.check(this.pressedKeys)) {\n        for (let j = 0; j < macro.keyNames.length; j += 1) {\n          const index = this.pressedKeys.indexOf(macro.keyNames[j]);\n          if (index > -1) {\n            this.pressedKeys.splice(index, 1);\n          }\n        }\n        if (macro.handler) {\n          macro.keyNames = null;\n        }\n        this._appliedMacros.splice(i, 1);\n        i -= 1;\n      }\n    }\n  }\n}\n","import { Locale } from './locale';\nimport { KeyCombo } from './key-combo';\n\n\nexport class Keyboard {\n  constructor(targetWindow, targetElement, targetPlatform, targetUserAgent) {\n    this._locale               = null;\n    this._currentContext       = '';\n    this._contexts             = {};\n    this._listeners            = [];\n    this._appliedListeners     = [];\n    this._locales              = {};\n    this._targetElement        = null;\n    this._targetWindow         = null;\n    this._targetPlatform       = '';\n    this._targetUserAgent      = '';\n    this._isModernBrowser      = false;\n    this._targetKeyDownBinding = null;\n    this._targetKeyUpBinding   = null;\n    this._targetResetBinding   = null;\n    this._paused               = false;\n\n    this._contexts.global = {\n      listeners: this._listeners,\n      targetWindow,\n      targetElement,\n      targetPlatform,\n      targetUserAgent\n    };\n\n    this.setContext('global');\n  }\n\n  setLocale(localeName, localeBuilder) {\n    let locale = null;\n    if (typeof localeName === 'string') {\n\n      if (localeBuilder) {\n        locale = new Locale(localeName);\n        localeBuilder(locale, this._targetPlatform, this._targetUserAgent);\n      } else {\n        locale = this._locales[localeName] || null;\n      }\n    } else {\n      locale     = localeName;\n      localeName = locale._localeName;\n    }\n\n    this._locale              = locale;\n    this._locales[localeName] = locale;\n    if (locale) {\n      this._locale.pressedKeys = locale.pressedKeys;\n    }\n\n    return this;\n  }\n\n  getLocale(localName) {\n    localName || (localName = this._locale.localeName);\n    return this._locales[localName] || null;\n  }\n\n  bind(keyComboStr, pressHandler, releaseHandler, preventRepeatByDefault) {\n    if (keyComboStr === null || typeof keyComboStr === 'function') {\n      preventRepeatByDefault = releaseHandler;\n      releaseHandler         = pressHandler;\n      pressHandler           = keyComboStr;\n      keyComboStr            = null;\n    }\n\n    if (\n      keyComboStr &&\n      typeof keyComboStr === 'object' &&\n      typeof keyComboStr.length === 'number'\n    ) {\n      for (let i = 0; i < keyComboStr.length; i += 1) {\n        this.bind(keyComboStr[i], pressHandler, releaseHandler);\n      }\n      return this;\n    }\n\n    this._listeners.push({\n      keyCombo              : keyComboStr ? new KeyCombo(keyComboStr) : null,\n      pressHandler          : pressHandler           || null,\n      releaseHandler        : releaseHandler         || null,\n      preventRepeat         : preventRepeatByDefault || false,\n      preventRepeatByDefault: preventRepeatByDefault || false,\n      executingHandler      : false\n    });\n\n    return this;\n  }\n\n  addListener(keyComboStr, pressHandler, releaseHandler, preventRepeatByDefault) {\n    return this.bind(keyComboStr, pressHandler, releaseHandler, preventRepeatByDefault);\n  }\n\n  on(keyComboStr, pressHandler, releaseHandler, preventRepeatByDefault) {\n    return this.bind(keyComboStr, pressHandler, releaseHandler, preventRepeatByDefault);\n  }\n\n  bindPress(keyComboStr, pressHandler, preventRepeatByDefault) {\n    return this.bind(keyComboStr, pressHandler, null, preventRepeatByDefault);\n  }\n\n  bindRelease(keyComboStr, releaseHandler) {\n    return this.bind(keyComboStr, null, releaseHandler, preventRepeatByDefault);\n  }\n\n  unbind(keyComboStr, pressHandler, releaseHandler) {\n    if (keyComboStr === null || typeof keyComboStr === 'function') {\n      releaseHandler = pressHandler;\n      pressHandler   = keyComboStr;\n      keyComboStr = null;\n    }\n\n    if (\n      keyComboStr &&\n      typeof keyComboStr === 'object' &&\n      typeof keyComboStr.length === 'number'\n    ) {\n      for (let i = 0; i < keyComboStr.length; i += 1) {\n        this.unbind(keyComboStr[i], pressHandler, releaseHandler);\n      }\n      return this;\n    }\n\n    for (let i = 0; i < this._listeners.length; i += 1) {\n      const listener = this._listeners[i];\n\n      const comboMatches          = !keyComboStr && !listener.keyCombo ||\n                                  listener.keyCombo && listener.keyCombo.isEqual(keyComboStr);\n      const pressHandlerMatches   = !pressHandler && !releaseHandler ||\n                                  !pressHandler && !listener.pressHandler ||\n                                  pressHandler === listener.pressHandler;\n      const releaseHandlerMatches = !pressHandler && !releaseHandler ||\n                                  !releaseHandler && !listener.releaseHandler ||\n                                  releaseHandler === listener.releaseHandler;\n\n      if (comboMatches && pressHandlerMatches && releaseHandlerMatches) {\n        this._listeners.splice(i, 1);\n        i -= 1;\n      }\n    }\n\n    return this;\n  }\n\n  removeListener(keyComboStr, pressHandler, releaseHandler) {\n    return this.unbind(keyComboStr, pressHandler, releaseHandler);\n  }\n\n  off(keyComboStr, pressHandler, releaseHandler) {\n    return this.unbind(keyComboStr, pressHandler, releaseHandler);\n  }\n\n  setContext(contextName) {\n    if(this._locale) { this.releaseAllKeys(); }\n\n    if (!this._contexts[contextName]) {\n      const globalContext = this._contexts.global;\n      this._contexts[contextName] = {\n        listeners      : [],\n        targetWindow   : globalContext.targetWindow,\n        targetElement  : globalContext.targetElement,\n        targetPlatform : globalContext.targetPlatform,\n        targetUserAgent: globalContext.targetUserAgent\n      };\n    }\n\n    const context        = this._contexts[contextName];\n    this._currentContext = contextName;\n    this._listeners      = context.listeners;\n\n    this.stop();\n    this.watch(\n      context.targetWindow,\n      context.targetElement,\n      context.targetPlatform,\n      context.targetUserAgent\n    );\n\n    return this;\n  }\n\n  getContext() {\n    return this._currentContext;\n  }\n\n  withContext(contextName, callback) {\n    const previousContextName = this.getContext();\n    this.setContext(contextName);\n\n    callback();\n\n    this.setContext(previousContextName);\n\n    return this;\n  }\n\n  watch(targetWindow, targetElement, targetPlatform, targetUserAgent) {\n    this.stop();\n\n    const win = typeof globalThis !== 'undefined' ? globalThis :\n                typeof global !== 'undefined' ? global :\n                typeof window !== 'undefined' ? window :\n                {};\n\n    if (!targetWindow) {\n      if (!win.addEventListener && !win.attachEvent) {\n        throw new Error('Cannot find window functions addEventListener or attachEvent.');\n      }\n      targetWindow = win;\n    }\n\n    // Handle element bindings where a target window is not passed\n    if (typeof targetWindow.nodeType === 'number') {\n      targetUserAgent = targetPlatform;\n      targetPlatform  = targetElement;\n      targetElement   = targetWindow;\n      targetWindow    = win;\n    }\n\n    if (!targetWindow.addEventListener && !targetWindow.attachEvent) {\n      throw new Error('Cannot find addEventListener or attachEvent methods on targetWindow.');\n    }\n\n    this._isModernBrowser = !!targetWindow.addEventListener;\n\n    const userAgent = targetWindow.navigator && targetWindow.navigator.userAgent || '';\n    const platform  = targetWindow.navigator && targetWindow.navigator.platform  || '';\n\n    targetElement   && targetElement   !== null || (targetElement   = targetWindow.document);\n    targetPlatform  && targetPlatform  !== null || (targetPlatform  = platform);\n    targetUserAgent && targetUserAgent !== null || (targetUserAgent = userAgent);\n\n    this._targetKeyDownBinding = (event) => {\n      this.pressKey(event.keyCode, event);\n      this._handleCommandBug(event, platform);\n    };\n    this._targetKeyUpBinding = (event) => {\n      this.releaseKey(event.keyCode, event);\n    };\n    this._targetResetBinding = (event) => {\n      this.releaseAllKeys(event);\n    };\n\n    this._bindEvent(targetElement, 'keydown', this._targetKeyDownBinding);\n    this._bindEvent(targetElement, 'keyup',   this._targetKeyUpBinding);\n    this._bindEvent(targetWindow,  'focus',   this._targetResetBinding);\n    this._bindEvent(targetWindow,  'blur',    this._targetResetBinding);\n\n    this._targetElement   = targetElement;\n    this._targetWindow    = targetWindow;\n    this._targetPlatform  = targetPlatform;\n    this._targetUserAgent = targetUserAgent;\n\n    const currentContext           = this._contexts[this._currentContext];\n    currentContext.targetWindow    = this._targetWindow;\n    currentContext.targetElement   = this._targetElement;\n    currentContext.targetPlatform  = this._targetPlatform;\n    currentContext.targetUserAgent = this._targetUserAgent;\n\n    return this;\n  }\n\n  stop() {\n    if (!this._targetElement || !this._targetWindow) { return; }\n\n    this._unbindEvent(this._targetElement, 'keydown', this._targetKeyDownBinding);\n    this._unbindEvent(this._targetElement, 'keyup',   this._targetKeyUpBinding);\n    this._unbindEvent(this._targetWindow,  'focus',   this._targetResetBinding);\n    this._unbindEvent(this._targetWindow,  'blur',    this._targetResetBinding);\n\n    this._targetWindow  = null;\n    this._targetElement = null;\n\n    return this;\n  }\n\n  pressKey(keyCode, event) {\n    if (this._paused) { return this; }\n    if (!this._locale) { throw new Error('Locale not set'); }\n\n    this._locale.pressKey(keyCode);\n    this._applyBindings(event);\n\n    return this;\n  }\n\n  releaseKey(keyCode, event) {\n    if (this._paused) { return this; }\n    if (!this._locale) { throw new Error('Locale not set'); }\n\n    this._locale.releaseKey(keyCode);\n    this._clearBindings(event);\n\n    return this;\n  }\n\n  releaseAllKeys(event) {\n    if (this._paused) { return this; }\n    if (!this._locale) { throw new Error('Locale not set'); }\n\n    this._locale.pressedKeys.length = 0;\n    this._clearBindings(event);\n\n    return this;\n  }\n\n  pause() {\n    if (this._paused) { return this; }\n    if (this._locale) { this.releaseAllKeys(); }\n    this._paused = true;\n\n    return this;\n  }\n\n  resume() {\n    this._paused = false;\n\n    return this;\n  }\n\n  reset() {\n    this.releaseAllKeys();\n    this._listeners.length = 0;\n\n    return this;\n  }\n\n  _bindEvent(targetElement, eventName, handler) {\n    return this._isModernBrowser ?\n      targetElement.addEventListener(eventName, handler, false) :\n      targetElement.attachEvent('on' + eventName, handler);\n  }\n\n  _unbindEvent(targetElement, eventName, handler) {\n    return this._isModernBrowser ?\n      targetElement.removeEventListener(eventName, handler, false) :\n      targetElement.detachEvent('on' + eventName, handler);\n  }\n\n  _getGroupedListeners() {\n    const listenerGroups   = [];\n    const listenerGroupMap = [];\n\n    let listeners = this._listeners;\n    if (this._currentContext !== 'global') {\n      listeners = [...listeners, ...this._contexts.global.listeners];\n    }\n\n    listeners.sort(\n      (a, b) =>\n        (b.keyCombo ? b.keyCombo.keyNames.length : 0) -\n        (a.keyCombo ? a.keyCombo.keyNames.length : 0)\n    ).forEach((l) => {\n      let mapIndex = -1;\n      for (let i = 0; i < listenerGroupMap.length; i += 1) {\n        if (listenerGroupMap[i] === null && l.keyCombo === null ||\n            listenerGroupMap[i] !== null && listenerGroupMap[i].isEqual(l.keyCombo)) {\n          mapIndex = i;\n        }\n      }\n      if (mapIndex === -1) {\n        mapIndex = listenerGroupMap.length;\n        listenerGroupMap.push(l.keyCombo);\n      }\n      if (!listenerGroups[mapIndex]) {\n        listenerGroups[mapIndex] = [];\n      }\n      listenerGroups[mapIndex].push(l);\n    });\n\n    return listenerGroups;\n  }\n\n  _applyBindings(event) {\n    let preventRepeat = false;\n\n    event || (event = {});\n    event.preventRepeat = () => { preventRepeat = true; };\n    event.pressedKeys   = this._locale.pressedKeys.slice(0);\n\n    const activeTargetKeys = this._locale.activeTargetKeys;\n    const pressedKeys      = this._locale.pressedKeys.slice(0);\n    const listenerGroups   = this._getGroupedListeners();\n\n    for (let i = 0; i < listenerGroups.length; i += 1) {\n      const listeners = listenerGroups[i];\n      const keyCombo  = listeners[0].keyCombo;\n\n      if (\n        keyCombo === null ||\n        keyCombo.check(pressedKeys) &&\n        activeTargetKeys.some(k => keyCombo.keyNames.includes(k))\n      ) {\n        for (let j = 0; j < listeners.length; j += 1) {\n          let listener = listeners[j];\n\n          if (!listener.executingHandler && listener.pressHandler && !listener.preventRepeat) {\n            listener.executingHandler = true;\n            listener.pressHandler.call(this, event);\n            listener.executingHandler = false;\n\n            if (preventRepeat || listener.preventRepeatByDefault) {\n              listener.preventRepeat = true;\n              preventRepeat          = false;\n            }\n          }\n\n          if (this._appliedListeners.indexOf(listener) === -1) {\n            this._appliedListeners.push(listener);\n          }\n        }\n\n        if (keyCombo) {\n          for (let j = 0; j < keyCombo.keyNames.length; j += 1) {\n            const index = pressedKeys.indexOf(keyCombo.keyNames[j]);\n            if (index !== -1) {\n              pressedKeys.splice(index, 1);\n              j -= 1;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _clearBindings(event) {\n    event || (event = {});\n    event.pressedKeys = this._locale.pressedKeys.slice(0);\n\n    for (let i = 0; i < this._appliedListeners.length; i += 1) {\n      const listener = this._appliedListeners[i];\n      const keyCombo = listener.keyCombo;\n      if (keyCombo === null || !keyCombo.check(this._locale.pressedKeys)) {\n        listener.preventRepeat = false;\n        if (keyCombo !== null || event.pressedKeys.length === 0) {\n          this._appliedListeners.splice(i, 1);\n          i -= 1;\n        }\n        if (!listener.executingHandler && listener.releaseHandler) {\n          listener.executingHandler = true;\n          listener.releaseHandler.call(this, event);\n          listener.executingHandler = false;\n        }\n      }\n    }\n  }\n\n  _handleCommandBug(event, platform) {\n    // On Mac when the command key is kept pressed, keyup is not triggered for any other key.\n    // In this case force a keyup for non-modifier keys directly after the keypress.\n    const modifierKeys = [\"shift\", \"ctrl\", \"alt\", \"capslock\", \"tab\", \"command\"];\n    if (platform.match(\"Mac\") && this._locale.pressedKeys.includes(\"command\") &&\n        !modifierKeys.includes(this._locale.getKeyNames(event.keyCode)[0])) {\n      this._targetKeyUpBinding(event);\n    }\n  }\n}\n","\nexport function us(locale, platform, userAgent) {\n\n  // general\n  locale.bindKeyCode(3,   ['cancel']);\n  locale.bindKeyCode(8,   ['backspace']);\n  locale.bindKeyCode(9,   ['tab']);\n  locale.bindKeyCode(12,  ['clear']);\n  locale.bindKeyCode(13,  ['enter']);\n  locale.bindKeyCode(16,  ['shift']);\n  locale.bindKeyCode(17,  ['ctrl']);\n  locale.bindKeyCode(18,  ['alt', 'menu']);\n  locale.bindKeyCode(19,  ['pause', 'break']);\n  locale.bindKeyCode(20,  ['capslock']);\n  locale.bindKeyCode(27,  ['escape', 'esc']);\n  locale.bindKeyCode(32,  ['space', 'spacebar']);\n  locale.bindKeyCode(33,  ['pageup']);\n  locale.bindKeyCode(34,  ['pagedown']);\n  locale.bindKeyCode(35,  ['end']);\n  locale.bindKeyCode(36,  ['home']);\n  locale.bindKeyCode(37,  ['left']);\n  locale.bindKeyCode(38,  ['up']);\n  locale.bindKeyCode(39,  ['right']);\n  locale.bindKeyCode(40,  ['down']);\n  locale.bindKeyCode(41,  ['select']);\n  locale.bindKeyCode(42,  ['printscreen']);\n  locale.bindKeyCode(43,  ['execute']);\n  locale.bindKeyCode(44,  ['snapshot']);\n  locale.bindKeyCode(45,  ['insert', 'ins']);\n  locale.bindKeyCode(46,  ['delete', 'del']);\n  locale.bindKeyCode(47,  ['help']);\n  locale.bindKeyCode(145, ['scrolllock', 'scroll']);\n  locale.bindKeyCode(188, ['comma', ',']);\n  locale.bindKeyCode(190, ['period', '.']);\n  locale.bindKeyCode(191, ['slash', 'forwardslash', '/']);\n  locale.bindKeyCode(192, ['graveaccent', '`']);\n  locale.bindKeyCode(219, ['openbracket', '[']);\n  locale.bindKeyCode(220, ['backslash', '\\\\']);\n  locale.bindKeyCode(221, ['closebracket', ']']);\n  locale.bindKeyCode(222, ['apostrophe', '\\'']);\n\n  // 0-9\n  locale.bindKeyCode(48, ['zero', '0']);\n  locale.bindKeyCode(49, ['one', '1']);\n  locale.bindKeyCode(50, ['two', '2']);\n  locale.bindKeyCode(51, ['three', '3']);\n  locale.bindKeyCode(52, ['four', '4']);\n  locale.bindKeyCode(53, ['five', '5']);\n  locale.bindKeyCode(54, ['six', '6']);\n  locale.bindKeyCode(55, ['seven', '7']);\n  locale.bindKeyCode(56, ['eight', '8']);\n  locale.bindKeyCode(57, ['nine', '9']);\n\n  // numpad\n  locale.bindKeyCode(96, ['numzero', 'num0']);\n  locale.bindKeyCode(97, ['numone', 'num1']);\n  locale.bindKeyCode(98, ['numtwo', 'num2']);\n  locale.bindKeyCode(99, ['numthree', 'num3']);\n  locale.bindKeyCode(100, ['numfour', 'num4']);\n  locale.bindKeyCode(101, ['numfive', 'num5']);\n  locale.bindKeyCode(102, ['numsix', 'num6']);\n  locale.bindKeyCode(103, ['numseven', 'num7']);\n  locale.bindKeyCode(104, ['numeight', 'num8']);\n  locale.bindKeyCode(105, ['numnine', 'num9']);\n  locale.bindKeyCode(106, ['nummultiply', 'num*']);\n  locale.bindKeyCode(107, ['numadd', 'num+']);\n  locale.bindKeyCode(108, ['numenter']);\n  locale.bindKeyCode(109, ['numsubtract', 'num-']);\n  locale.bindKeyCode(110, ['numdecimal', 'num.']);\n  locale.bindKeyCode(111, ['numdivide', 'num/']);\n  locale.bindKeyCode(144, ['numlock', 'num']);\n\n  // function keys\n  locale.bindKeyCode(112, ['f1']);\n  locale.bindKeyCode(113, ['f2']);\n  locale.bindKeyCode(114, ['f3']);\n  locale.bindKeyCode(115, ['f4']);\n  locale.bindKeyCode(116, ['f5']);\n  locale.bindKeyCode(117, ['f6']);\n  locale.bindKeyCode(118, ['f7']);\n  locale.bindKeyCode(119, ['f8']);\n  locale.bindKeyCode(120, ['f9']);\n  locale.bindKeyCode(121, ['f10']);\n  locale.bindKeyCode(122, ['f11']);\n  locale.bindKeyCode(123, ['f12']);\n  locale.bindKeyCode(124, ['f13']);\n  locale.bindKeyCode(125, ['f14']);\n  locale.bindKeyCode(126, ['f15']);\n  locale.bindKeyCode(127, ['f16']);\n  locale.bindKeyCode(128, ['f17']);\n  locale.bindKeyCode(129, ['f18']);\n  locale.bindKeyCode(130, ['f19']);\n  locale.bindKeyCode(131, ['f20']);\n  locale.bindKeyCode(132, ['f21']);\n  locale.bindKeyCode(133, ['f22']);\n  locale.bindKeyCode(134, ['f23']);\n  locale.bindKeyCode(135, ['f24']);\n\n  // secondary key symbols\n  locale.bindMacro('shift + `', ['tilde', '~']);\n  locale.bindMacro('shift + 1', ['exclamation', 'exclamationpoint', '!']);\n  locale.bindMacro('shift + 2', ['at', '@']);\n  locale.bindMacro('shift + 3', ['number', '#']);\n  locale.bindMacro('shift + 4', ['dollar', 'dollars', 'dollarsign', '$']);\n  locale.bindMacro('shift + 5', ['percent', '%']);\n  locale.bindMacro('shift + 6', ['caret', '^']);\n  locale.bindMacro('shift + 7', ['ampersand', 'and', '&']);\n  locale.bindMacro('shift + 8', ['asterisk', '*']);\n  locale.bindMacro('shift + 9', ['openparen', '(']);\n  locale.bindMacro('shift + 0', ['closeparen', ')']);\n  locale.bindMacro('shift + -', ['underscore', '_']);\n  locale.bindMacro('shift + =', ['plus', '+']);\n  locale.bindMacro('shift + [', ['opencurlybrace', 'opencurlybracket', '{']);\n  locale.bindMacro('shift + ]', ['closecurlybrace', 'closecurlybracket', '}']);\n  locale.bindMacro('shift + \\\\', ['verticalbar', '|']);\n  locale.bindMacro('shift + ;', ['colon', ':']);\n  locale.bindMacro('shift + \\'', ['quotationmark', '\\'']);\n  locale.bindMacro('shift + !,', ['openanglebracket', '<']);\n  locale.bindMacro('shift + .', ['closeanglebracket', '>']);\n  locale.bindMacro('shift + /', ['questionmark', '?']);\n\n  if (platform.match('Mac')) {\n    locale.bindMacro('command', ['mod', 'modifier']);\n  } else {\n    locale.bindMacro('ctrl', ['mod', 'modifier']);\n  }\n\n  //a-z and A-Z\n  for (let keyCode = 65; keyCode <= 90; keyCode += 1) {\n    var keyName = String.fromCharCode(keyCode + 32);\n    var capitalKeyName = String.fromCharCode(keyCode);\n  \tlocale.bindKeyCode(keyCode, keyName);\n  \tlocale.bindMacro('shift + ' + keyName, capitalKeyName);\n  \tlocale.bindMacro('capslock + ' + keyName, capitalKeyName);\n  }\n\n  // browser caveats\n  const semicolonKeyCode = userAgent.match('Firefox') ? 59  : 186;\n  const dashKeyCode      = userAgent.match('Firefox') ? 173 : 189;\n  const equalKeyCode     = userAgent.match('Firefox') ? 61  : 187;\n  let leftCommandKeyCode;\n  let rightCommandKeyCode;\n  if (platform.match('Mac') && (userAgent.match('Safari') || userAgent.match('Chrome'))) {\n    leftCommandKeyCode  = 91;\n    rightCommandKeyCode = 93;\n  } else if(platform.match('Mac') && userAgent.match('Opera')) {\n    leftCommandKeyCode  = 17;\n    rightCommandKeyCode = 17;\n  } else if(platform.match('Mac') && userAgent.match('Firefox')) {\n    leftCommandKeyCode  = 224;\n    rightCommandKeyCode = 224;\n  }\n  locale.bindKeyCode(semicolonKeyCode,    ['semicolon', ';']);\n  locale.bindKeyCode(dashKeyCode,         ['dash', '-']);\n  locale.bindKeyCode(equalKeyCode,        ['equal', 'equalsign', '=']);\n  locale.bindKeyCode(leftCommandKeyCode,  ['command', 'windows', 'win', 'super', 'leftcommand', 'leftwindows', 'leftwin', 'leftsuper']);\n  locale.bindKeyCode(rightCommandKeyCode, ['command', 'windows', 'win', 'super', 'rightcommand', 'rightwindows', 'rightwin', 'rightsuper']);\n\n  // kill keys\n  locale.setKillKey('command');\n};\n","import { Keyboard } from './lib/keyboard';\nimport { Locale } from './lib/locale';\nimport { KeyCombo } from './lib/key-combo';\nimport { us } from './locales/us';\n\nconst keyboard = new Keyboard();\n\nkeyboard.setLocale('us', us);\n\nkeyboard.Keyboard = Keyboard;\nkeyboard.Locale = Locale;\nkeyboard.KeyCombo = KeyCombo;\n\nexport default keyboard;\n"],"sourceRoot":""}